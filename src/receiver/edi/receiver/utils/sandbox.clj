(ns edi.receiver.utils.sandbox
  (:refer-clojure :only [*
                         +
                         -
                         /
                         <
                         <=
                         =
                         ==
                         >
                         >=
                         aget
                         alength
                         #_and                              ; overrided
                         any?
                         apply
                         areduce
                         array-map
                         assoc
                         assoc!
                         assoc-in
                         associative?
                         bigdec
                         bigint
                         biginteger
                         bit-and
                         bit-and-not
                         bit-clear
                         bit-flip
                         bit-not
                         bit-or
                         bit-set
                         bit-shift-left
                         bit-shift-right
                         bit-test
                         bit-xor
                         boolean
                         boolean?
                         butlast
                         byte
                         cat
                         char
                         char?
                         coll?
                         comp
                         comparator
                         compare
                         complement
                         concat
                         conj
                         cons
                         constantly
                         contains?
                         count
                         counted?
                         cycle
                         dec
                         decimal?
                         dedupe
                         denominator
                         disj
                         dissoc
                         distinct
                         distinct?
                         double
                         double?
                         drop
                         drop-last
                         drop-while
                         eduction
                         empty
                         empty?
                         ensure-reduced
                         even?
                         every-pred
                         every?
                         false?
                         ffirst
                         filter
                         filterv
                         find
                         first
                         flatten
                         float
                         float?
                         fnext
                         fnil
                         format
                         frequencies
                         get
                         get-in
                         group-by
                         halt-when
                         hash
                         hash-map
                         hash-ordered-coll
                         hash-set
                         hash-unordered-coll
                         ident?
                         identical?
                         identity
                         inc
                         indexed?
                         init-proxy
                         inst-ms
                         int
                         int?
                         integer?
                         interleave
                         interpose
                         into
                         into-array
                         iterate
                         iterator-seq
                         juxt
                         keep
                         keep-indexed
                         key
                         keys
                         keyword
                         keyword?
                         last
                         list
                         list*
                         list?
                         long
                         map
                         map-entry?
                         map-indexed
                         map?
                         mapcat
                         mapv
                         max
                         max-key
                         merge
                         merge-with
                         min
                         min-key
                         mod
                         name
                         nat-int?
                         neg-int?
                         neg?
                         next
                         nfirst
                         nil?
                         nnext
                         not
                         not-any?
                         not-empty
                         not-every?
                         not=
                         nth
                         nthnext
                         nthrest
                         num
                         number?
                         numerator
                         odd?
                         #_or                               ; overrided
                         partial
                         partition
                         partition-all
                         partition-by
                         peek
                         pop
                         pos-int?
                         pos?
                         quot
                         rand
                         rand-int
                         rand-nth
                         random-sample
                         range
                         ratio?
                         rational?
                         rationalize
                         re-find
                         re-groups
                         re-matcher
                         re-matches
                         re-pattern
                         re-seq
                         reduce
                         reduce-kv
                         reduced
                         reduced?
                         reductions
                         rem
                         remove
                         repeat
                         repeatedly
                         replace
                         rest
                         reverse
                         reversible?
                         rseq
                         rsubseq
                         second
                         select-keys
                         seq
                         seq?
                         seqable?
                         seque
                         sequence
                         sequential?
                         set
                         set?
                         short
                         shuffle
                         some
                         some-fn
                         some?
                         sort
                         sort-by
                         sorted-map
                         sorted-map-by
                         sorted-set
                         sorted-set-by
                         sorted?
                         split-at
                         split-with
                         str
                         string?
                         subs
                         subseq
                         subvec
                         take
                         take-last
                         take-nth
                         take-while
                         transduce
                         true?
                         unchecked-add
                         unchecked-add-int
                         unchecked-byte
                         unchecked-char
                         unchecked-dec
                         unchecked-dec-int
                         unchecked-divide-int
                         unchecked-double
                         unchecked-float
                         unchecked-inc
                         unchecked-inc-int
                         unchecked-int
                         unchecked-long
                         unchecked-multiply
                         unchecked-multiply-int
                         unchecked-negate
                         unchecked-negate-int
                         unchecked-remainder-int
                         unchecked-short
                         unchecked-subtract
                         unchecked-subtract-int
                         unsigned-bit-shift-right
                         update
                         update-in
                         uri?
                         uuid?
                         val
                         vals
                         vec
                         vector
                         vector-of
                         vector?
                         zero?
                         zipmap])
  (:require [clojure.string :refer [blank?
                                    capitalize
                                    ends-with?
                                    escape
                                    includes?
                                    index-of
                                    join
                                    last-index-of
                                    lower-case
                                    re-quote-replacement
                                    #_replace               ; renamed to string-replace
                                    replace-first
                                    #_reverse               ; renamed to string-reverse
                                    split
                                    split-lines
                                    starts-with?
                                    trim
                                    trim-newline
                                    triml
                                    trimr
                                    upper-case]]
            [edi.receiver.utils.sandbox-overrides :refer :all]))
